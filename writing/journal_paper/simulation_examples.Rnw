%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Do not edit the TeX file your work
% will be overwritten.  Edit the RnW
% file instead.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<setup, include=FALSE, cache=FALSE>>=
knitr_debug <- FALSE # Set to true to see error output
cache <- FALSE # Set to true to cache knitr output for this analysis.
r_script_dir <- "./R_scripts/"
source("R_scripts/initialize.R", echo=FALSE)
source("R_scripts/plotting_utils.R")

# load data
source("R_scripts/simple_examples/load_data.R")
@

\newcommand{\SimPathologicalRTwoFig}{
<<pathological_r2_cap>>=
fig_cap <- paste("A plot of $f(x_1, x_2)$ from \\exref{r2_pathological}.")
SetImageSize()
@
<<r2_pathological, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/pathological_r2.R',
       echo=knitr_debug, print.eval=TRUE)
@
}


\newcommand{\SimPositivePertFig}{
<<positive_pert_cap>>=
fig_cap <- paste("A plot of the perturbations from ",
    "\\exref{positive_pert_large} with $p=2$ and $\\epsilon=0.05$.  ",
    "Positive $\\phi$ can only add mass, so to remove ",
    "a small amount of mass requires adding mass everywhere else and ",
    "re-normalizing, resulting in a large perturbation according to ",
    "$\\norm{\\cdot}_p$.", sep="")
SetImageSize()
@
<<positive_pert, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/positive_pert.R',
       echo=knitr_debug, print.eval=TRUE)
@
}


\newcommand{\FunctionPathsFig}{
<<path_cap>>=
fig_cap <- paste("Multiplicative and linear mixture paths between two densities.", sep="")
SetImageSize(aspect_ratio=0.6 * base_aspect_ratio)
@
<<path, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/function_paths.R',
       echo=knitr_debug, print.eval=TRUE)
@
}


\newcommand{\FunctionPathsMultFig}{
<<path_mult_cap>>=
fig_cap <- paste("Multiplicative mixture paths between two densities.", sep="")
SetImageSize(aspect_ratio=0.35 * base_aspect_ratio)
@
<<mult_path, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/function_paths_mult.R',
       echo=knitr_debug, print.eval=TRUE)
@
}


\newcommand{\FunctionPathsLinFig}{
<<path_lin_cap>>=
fig_cap <- paste("Linear mixture paths between two densities.", sep="")
SetImageSize(aspect_ratio=0.35 * base_aspect_ratio)
@
<<lin_path, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/function_paths_lin.R',
       echo=knitr_debug, print.eval=TRUE)
@
}


\newcommand{\FunctionBallFig}{
<<func_ball_cap>>=
fig_cap <- paste("An multiplicative ball $\\ball_\\phi(\\delta)$.", sep="")
SetImageSize(aspect_ratio=0.35 * base_aspect_ratio)
@
<<func_ball, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source('./R_scripts/simple_examples/function_ball.R',
       echo=knitr_debug, print.eval=TRUE)
@
}



\newcommand{\FunctionDistFig}{
<<func_dist_cap>>=
fig_cap <- paste("Two densities that are distant according to KL divergence and ",
                 "$\\norminf{\\cdot}$ but close according to $\\norm{\\cdot}_p$ ",
                 "for $p \\in [1, \\infty)$.",
                 sep="")
#SetImageSize(aspect_ratio=0.6 * base_aspect_ratio, image_width=1.0)
SetImageSize(aspect_ratio=base_aspect_ratio, image_width=1.0)
@
<<func_dist, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source(file.path(r_script_dir, 'simple_examples/distant_distributions.R'),
       echo=knitr_debug, print.eval=TRUE)
@
}



\newcommand{\LinfExamplesFig}{
<<linf_examples_cap>>=
fig_cap1 <- paste0("A multiplicative ball $\\ball_\\phi(\\delta)$.")
fig_cap2 <- paste0("Two densities that are distant according to KL divergence and ",
                   "$\\norminf{\\cdot}$ but close according to $\\norm{\\cdot}_p$ ",
                   "for $p \\in [1, \\infty)$.")
fig_cap <- paste0("Left two: ", fig_cap1,  "  Right: ", fig_cap2)
#SetImageSize(aspect_ratio=0.6 * base_aspect_ratio, image_width=1.0)
SetImageSize(aspect_ratio=0.4 * base_aspect_ratio, image_width=1.0)
@
<<linf_examples, cache=cache, fig.show='hold', fig.cap=fig_cap>>=
source(file.path(r_script_dir, 'simple_examples/linf_examples.R'),
       echo=knitr_debug, print.eval=TRUE)
@
}
